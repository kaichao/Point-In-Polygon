package pip;

import static org.junit.Assert.*;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import cnic.pip.PointInPolygonOperator;
import cnic.pip.PointMock;
import cnic.pip.PolygonMock;
import cnic.pip.impl.CnicPIP;
import cnic.pip.impl.EsriPIP;
import cnic.pip.impl.JtsPIP;

public class PerformanceTests {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	PointInPolygonOperator pip;
	@Before
	public void setUp() throws Exception {
		assertTrue(true);
		String s1 = "MULTIPOLYGON(((-2 -1,-2 1, 2 1, 2 -1, -2 -1)))";
		String s2 = "MULTIPOLYGON(((117.753887178 15.1543692630001,117.755692331 15.151887178,"
				+ "117.753887178 15.1500820250001,117.751856381 15.151887178,117.753887178 15.1543692630001)))";

		String s3 = "MULTIPOLYGON(((-62.5475968089999 17.1046410180001,-62.5657445949999 17.1005313170001,"
				+ "-62.612172004 17.1041527360001,-62.6263728509999 17.1406924500001,-62.6186417309999 17.1828067080001,"
				+ "-62.5992325509999 17.2029483090001,-62.578439908 17.2025414080001,-62.5603735019999 17.1967227230001,"
				+ "-62.546498176 17.1837832700001,-62.5384415359999 17.1619326840001,-62.5372615229999 17.1528994810001,"
				+ "-62.5367732409999 17.1297061220001,-62.5384415359999 17.1209984400001,-62.5435684889999 17.1088727890001,"
				+ "-62.5475968089999 17.1046410180001)),"
				+ "((-62.6954646479999 17.3332380230002,-62.6781306629999 17.2922223980001,-62.6668595039999 17.2735049500001,"
				+ "-62.6504613919999 17.2656110700001,-62.6368302069999 17.2582054710001,-62.6248266269999 17.2418480490001,"
				+ "-62.6247452459999 17.2252871770001,-62.6470434239999 17.2171898460001,-62.659738736 17.2254906270001,"
				+ "-62.670480924 17.2631696640001,-62.6902970039999 17.2749697940001,-62.7033585279999 17.2891299500001,"
				+ "-62.7125544909999 17.2923037780001,-62.7440486319999 17.2905947940001,-62.756947395 17.2923037780001,"
				+ "-62.7887263659999 17.3046735700002,-62.831613736 17.3301455750001,-62.8610733709999 17.3622907570001,"
				+ "-62.8531388009999 17.39472077,-62.8492325509999 17.3981387390001,-62.8465470039999 17.3999697940001,"
				+ "-62.8435766269999 17.4010684270001,-62.8388565749999 17.4021670590001,-62.8266495429999 17.4071719420001,"
				+ "-62.8223363919999 17.4101016300001,-62.8195694649999 17.4158389340001,-62.7199600899999 17.3585472680001,"
				+ "-62.6954646479999 17.3332380230002)))";
		//  EvenlopeExt(-62.9, -62.5, 17.1, 17.5);
		String kunshan = "MULTIPOLYGON(((120.808720001129 31.1751839986432,120.811560001129 31.1773279986432,120.812050001129 31.1800899986432,120.812550001129 31.1826229986432,120.813560001129 31.1860769986432,120.816440001129 31.1895559986432,120.819630001129 31.1914269986432,120.822290001129 31.1919169986432,120.825490001129 31.1926419986432,120.830010001129 31.1938399986432,120.833720001129 31.1957189986432,120.835300001129 31.1973439986432,120.837120001129 31.2003479986432,120.838420001129 31.2026579986432,120.840260001129 31.2049749986432,120.842900001129 31.2070689986432,120.846860001129 31.2100999986432,120.849770001129 31.2119689986432,120.852160001129 31.2131419986432,120.855090001129 31.2140919986432,120.858300001129 31.2134399986432,120.861780001129 31.2132469986432,120.865800001129 31.2128309986432,120.873570001129 31.2119979986432,120.878110001129 31.2113569986432,120.881320001129 31.2111609986432,120.885060001129 31.2114319986432,120.887180001129 31.2130599986432,120.888470001129 31.2156009986432,120.890560001129 31.2192969986432,120.891580001129 31.2227539986432,120.891530001129 31.2264249986432,120.890660001129 31.2303199986432,120.889500001129 31.2367379986432,120.886990001129 31.2433679986432,120.885580001129 31.2477189986432,120.881780001129 31.2515789986432,120.877950001129 31.2572799986432,120.874180001129 31.2593059986432,120.870930001129 31.2620259986432,120.868740001129 31.2647589986432,120.867370001129 31.2670399986432,120.865990001129 31.2700099986432,120.865140001129 31.2734449986432,120.865620001129 31.2771239986432,120.865280001129 31.2817129986432,120.865200001129 31.2865349986432,120.866720001129 31.2920609986432,120.866950001129 31.2948209986432,120.866070001129 31.2996329986432,120.864650001129 31.3048989986432,120.863530001129 31.3090189986432,120.861290001129 31.3149659986432,120.858500001129 31.3225139986432,120.856580001129 31.3259349986432,120.852760001129 31.3302569986432,120.844860001129 31.3388959986432,120.841030001129 31.3445929986432,120.837750001129 31.3491499986432,120.834950001129 31.3571549986432,120.832420001129 31.3642459986432,120.830750001129 31.3685889986432,120.826430001129 31.3708379986432,120.823430001129 31.3744789986432,120.819370001129 31.3771899986432,120.817430001129 31.3812999986432,120.816280001129 31.3861099986431,120.815690001129 31.3897759986432,120.814810001129 31.3943579986432,120.814170001129 31.4007799986432,120.814330001129 31.4076709986432,120.816830001129 31.4189489986432,120.820400001129 31.4304699986432,120.822360001129 31.4419709986432,120.822490001129 31.4504679986432,120.822400001129 31.4568939986432,120.822830001129 31.4633269986432,120.822750001129 31.4686089986432,120.821870001129 31.4734209986432,120.820480001129 31.4763889986432,120.819360001129 31.4795909986432,120.817690001129 31.4834769986432,120.813870001129 31.4880259986432,120.810010001129 31.4941809986432,120.808050001129 31.4994389986432,120.805790001129 31.5065329986432,120.804920001129 31.5108849986432,120.804590001129 31.5150129986432,120.804810001129 31.5177709986432,120.805590001129 31.5196169986432,120.807960001129 31.5219399986432,120.810880001129 31.5238079986432,120.814080001129 31.5249919986432,120.817960001129 31.5264319986432,120.820890001129 31.5267409986432,120.824110001129 31.5268269986432,120.826530001129 31.5266609986432,120.831620001129 31.5267979986432,120.834810001129 31.5275729986432,120.836950001129 31.5276299986431,120.838620001129 31.5262989986432,120.840040001129 31.5238109986432,120.840730001129 31.5199279986432,120.841370001129 31.5171909986432,120.841740001129 31.5142149986432,120.843500001129 31.5103609986432,120.848150001129 31.5077319986432,120.851130001129 31.5071239986432,120.854090001129 31.5067409986432,120.857600001129 31.5061469986432,120.861060001129 31.5066989986432,120.864720001129 31.5093209986432,120.866210001129 31.5125729986432,120.867130001129 31.5167289986432,120.868270001129 31.5220389986432,120.869470001129 31.5257419986432,120.871480001129 31.5294699986432,120.874850001129 31.5325409986432,120.877980001129 31.5351509986432,120.880860001129 31.5368329986432,120.884550001129 31.5385359986432,120.888250001129 31.5400119986432,120.895670001129 31.5425029986432,120.897820001129 31.5423319986432,120.898720001129 31.5398289986432,120.897770001129 31.5363619986432,120.896800001129 31.5338099986432,120.896390001129 31.5303569986432,120.898090001129 31.5278779986432,120.903300001129 31.5248009986432,120.906810001129 31.5239749986432,120.909500001129 31.5238169986432,120.912970001129 31.5241369986432,120.917780001129 31.5247209986432,120.920430001129 31.5254799986432,120.922810001129 31.5262319986432,120.925480001129 31.5267599986432,120.930050001129 31.5264189986432,120.932500001129 31.5253369986432,120.936870001129 31.5231569986432,120.938870001129 31.5197639986432,120.941690001129 31.5161649986432,120.943220001129 31.5109249986432,120.945210001129 31.5077649986432,120.949910001129 31.5037559986432,120.954050001129 31.5006479986432,120.957900001129 31.4979929986432,120.961190001129 31.4960159986432,120.964160001129 31.4954009986432,120.967140001129 31.4945599986432,120.970370001129 31.4941839986432,120.976260001129 31.4941079986432,120.981580001129 31.4946139986432,120.988000001129 31.4953649986432,120.992020001129 31.4949469986432,120.997920001129 31.4952349986432,121.003280001129 31.4948269986432,121.006510001129 31.4941689986432,121.008930001129 31.4932769986432,121.010830001129 31.4916859986432,121.012470001129 31.4891779986432,121.011720001129 31.4854979986432,121.010150001129 31.4829559986432,121.008870001129 31.4783519986432,121.008370001129 31.4758209986432,121.008150001129 31.4726049986432,121.009000001129 31.4693979986432,121.010380001129 31.4664289986432,121.012560001129 31.4636939986432,121.015540001129 31.4611969986432,121.018250001129 31.4591579986432,121.020950001129 31.4575769986432,121.022060001129 31.4546009986432,121.022380001129 31.4516199986432,121.021370001129 31.4467889986432,121.021130001129 31.4442599986432,121.021440001129 31.4419689986432,121.021460001129 31.4401319986432,121.024180001129 31.4374009986432,121.027670001129 31.4362889986432,121.030100001129 31.4353919986432,121.035210001129 31.4340629986432,121.038960001129 31.4338679986432,121.042980001129 31.4339079986432,121.047270001129 31.4334889986432,121.050210001129 31.4339749986432,121.054760001129 31.4347079986432,121.057980001129 31.4338189986432,121.058820001129 31.4317609986432,121.059100001129 31.4299259986432,121.059400001129 31.4278619986432,121.062360001129 31.4272019986432,121.064500001129 31.4269909986432,121.068500001129 31.4281789986432,121.071970001129 31.4293579986432,121.075970001129 31.4305419986432,121.079970001129 31.4321859986432,121.083440001129 31.4335959986432,121.086360001129 31.4349989986432,121.089580001129 31.4350299986432,121.092270001129 31.4339049986432,121.094970001129 31.4320949986432,121.097140001129 31.4307369986432,121.097990001129 31.4268399986432,121.097500001129 31.4231619986432,121.095660001129 31.4208489986432,121.090630001129 31.4159829986432,121.086400001129 31.4115829986432,121.084050001129 31.4067379986432,121.083020001129 31.4044319986432,121.081700001129 31.4025839986432,121.081210001129 31.3993639986432,121.081240001129 31.3968389986432,121.081800001129 31.3950079986432,121.083170001129 31.3927229986432,121.088820001129 31.3902509986432,121.090970001129 31.3898119986432,121.092860001129 31.3884509986432,121.096640001129 31.3864189986432,121.098530001129 31.3845999986432,121.100710001129 31.3823239986432,121.100740001129 31.3800279986432,121.100520001129 31.3765809986432,121.100810001129 31.3747459986432,121.101360001129 31.3726859986432,121.102740001129 31.3704009986432,121.103580001129 31.3669639986432,121.104690001129 31.3644489986432,121.107030001129 31.3642859986432,121.106350001129 31.3605979986432,121.106160001129 31.3585259986432,121.108730001129 31.3537709986432,121.110400001129 31.3519739986432,121.112370001129 31.3495009986432,121.114320001129 31.3470229986432,121.117290001129 31.3461779986432,121.119710001129 31.3460079986432,121.122090001129 31.3469849986432,121.126060001129 31.3479999986432,121.128730001129 31.3482949986432,121.129860001129 31.3467179986432,121.130760001129 31.3437559986432,121.131420001129 31.3401009986432,121.132680001129 31.3348519986432,121.133960001129 31.3286859986432,121.131320001129 31.3277029986432,121.125730001129 31.3266449986432,121.122910001129 31.3231329986432,121.120320001129 31.3205449986432,121.118020001129 31.3175029986432,121.117100001129 31.3128909986432,121.117970001129 31.3110749986432,121.119670001129 31.3085919986432,121.121600001129 31.3065759986432,121.124320001129 31.3054939986432,121.127270001129 31.3051069986432,121.132640001129 31.3047809986432,121.138570001129 31.3035489986432,121.145550001129 31.3025719986432,121.146190001129 31.2996059986432,121.146550001129 31.2970889986432,121.146940001129 31.2931959986432,121.146300001129 31.2885889986432,121.144630001129 31.2825809986432,121.143720001129 31.2822949986432,121.141460001129 31.2815839986432,121.136920001129 31.2812419986432,121.132410001129 31.2802139986432,121.128680001129 31.2798919986432,121.123330001129 31.2797599986432,121.121680001129 31.2810969986432,121.119510001129 31.2819609986432,121.116580001129 31.2814289986432,121.113130001129 31.2808839986432,121.111290001129 31.2799219986432,121.109180001129 31.2789499986432,121.105170001129 31.2790809986432,121.100330001129 31.2798789986432,121.097600001129 31.2811869986432,121.094620001129 31.2824919986432,121.089740001129 31.2842059986432,121.085980001129 31.2847999986432,121.082470001129 31.2858599986432,121.078990001129 31.2857719986432,121.076340001129 31.2850189986432,121.074000001129 31.2831229986432,121.071970001129 31.2800879986432,121.069900001129 31.2779689986432,121.067630001129 31.2740119986432,121.065320001129 31.2714269986432,121.061140001129 31.2683369986432,121.058840001129 31.2655259986432,121.057660001129 31.2609039986432,121.057790001129 31.2572359986432,121.057530001129 31.2491929986432,121.057850001129 31.2402479986432,121.059120001129 31.2269669986432,121.060250001129 31.2100089986432,121.062830001129 31.1974469986432,121.064530001129 31.1869319986432,121.067640001129 31.1743829986432,121.068950001129 31.1677589986432,121.070110001129 31.1650329986432,121.072110001129 31.1614089986432,121.069750001129 31.1599729986432,121.067400001129 31.1585389986432,121.063940001129 31.1579909986432,121.060210001129 31.1576669986432,121.056210001129 31.1575659986432,121.048460001129 31.1575999986432,121.043760001129 31.1544969986432,121.044140001129 31.1512909986432,121.046990001129 31.1463149986432,121.046680001129 31.1398769986432,121.044050001129 31.1386639986432,121.040600001129 31.1381169986432,121.036590001129 31.1382469986432,121.029620001129 31.1389849986432,121.025310001129 31.1397949986432,121.020730001129 31.1410539986432,121.014850001129 31.1413649986432,121.010310001129 31.1412469986432,121.006870001129 31.1402419986432,121.003460001129 31.1385459986432,120.999510001129 31.1368389986432,120.996340001129 31.1360679986432,120.991570001129 31.1347979986432,120.985210001129 31.1334879986432,120.980430001129 31.1326729986432,120.975640001129 31.1323199986432,120.970260001129 31.1333289986432,120.966420001129 31.1359839986432,120.964200001129 31.1384529986432,120.962270001129 31.1400089986432,120.958770001129 31.1408369986432,120.952690001129 31.1390709986432,120.943920001129 31.1379239986432,120.934820001129 31.1383739986432,120.924120001129 31.1387839986432,120.918540001129 31.1379469986432,120.910290001129 31.1370409986432,120.899350001129 31.1367549986432,120.887310001129 31.1373539986432,120.880410001129 31.1362509986432,120.876290001129 31.1320099986432,120.875070001129 31.1289919986432,120.874890001129 31.1266919986432,120.872330001129 31.1236379986432,120.867110001129 31.1202849986432,120.861210001129 31.1137009986432,120.858160001129 31.1094859986432,120.859570001129 31.1074559986432,120.861500001129 31.1059019986432,120.865600001129 31.1032559986432,120.868360001129 31.1008049986432,120.873530001129 31.0984169986432,120.864890001129 31.0975459986432,120.859810001129 31.0979479986432,120.855770001129 31.0999719986432,120.851470001129 31.1017629986432,120.848240001129 31.1033339986432,120.845280001129 31.1049099986432,120.842820001129 31.1087859986432,120.840100001129 31.1124289986432,120.837630001129 31.1160769986432,120.833070001129 31.1178649986432,120.826090001129 31.1200829986432,120.818810001129 31.1245939986432,120.815830001129 31.1268579986432,120.813930001129 31.1291329986432,120.812030001129 31.1309489986432,120.810390001129 31.1334549986432,120.810060001129 31.1371269986432,120.810010001129 31.1405699986432,120.811290001129 31.1435719986432,120.812570001129 31.1477179986432,120.815400001129 31.1541809986432,120.816140001129 31.1580919986432,120.815790001129 31.1633679986432,120.814690001129 31.1656529986432,120.813040001129 31.1683899986432,120.811930001129 31.1709039986432,120.808720001129 31.1751839986432)))";
		polygons = new PolygonMock[4];
		polygons[0] = new PolygonMock(s1);
		polygons[1] = new PolygonMock(s2);
		polygons[2] = new PolygonMock(s3);
		polygons[3] = new PolygonMock(kunshan);
	}

	@After
	public void tearDown() throws Exception {
	}

//	@Test
	public void testEsri() {
		pip = new EsriPIP();
		for(int i=0;i<polygons.length;i++){
			System.out.format("testing esri,test%d:",i);
			doTest(polygons[i]);
		}
	}
//	@Test
	public void testJts() {
		pip = new JtsPIP();
		for(int i=0;i<polygons.length;i++){
			System.out.format("testing jts,test%d:",i);
			doTest(polygons[i]);
		}
	}
	@Test
	public void testCnic() {
		pip = new CnicPIP();
		for(int i=0;i<polygons.length;i++){
			System.out.format("testing cnic,test%d:",i);
			doTest(polygons[i]);
		}
	}

	private PolygonMock[] polygons;
	private void doTest(PolygonMock polygon){
		long t0 = System.currentTimeMillis();
		double delta = 0.0001;
		for(int i=0;i<100000;i++){
			for(int j=0;j<5000;j++){
				pip.contains(polygon, new PointMock(i*delta,j*delta));
			}
		}

		long t1 = System.currentTimeMillis();
		System.out.println((t1-t0) + "ms");
	}
}
